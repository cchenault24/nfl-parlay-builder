name: Auto Format Issues
on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  format-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Format issue with custom layout and NPB prefix
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const repo = context.repo;
            const body = issue.body || '';

            console.log('Original title:', issue.title);
            console.log('Issue number:', issue.number);

            // Update title to include actual issue number
            let title = issue.title;
            if (title.includes('NPB-#:')) {
              const newTitle = title.replace('NPB-#:', `NPB-${issue.number}:`);
              console.log('Updating title to:', newTitle);
              
              try {
                await github.rest.issues.update({
                  owner: repo.owner,
                  repo: repo.repo,
                  issue_number: issue.number,
                  title: newTitle
                });
                console.log('Title updated successfully');
              } catch (error) {
                console.error('Failed to update title:', error);
              }
            } else {
              console.log('Title does not contain NPB-#:, skipping title update');
            }

            // Parse form data from issue body
            const sections = {};
            const lines = body.split('\n');
            let currentSection = '';
            let currentContent = [];

            for (const line of lines) {
              if (line.startsWith('### ')) {
                if (currentSection) {
                  sections[currentSection] = currentContent.join('\n').trim();
                }
                currentSection = line.replace('### ', '').trim();
                currentContent = [];
              } else if (currentSection) {
                if (currentContent.length > 0 || line.trim() !== '') {
                  currentContent.push(line);
                }
              }
            }

            if (currentSection) {
              sections[currentSection] = currentContent.join('\n').trim();
            }

            Object.keys(sections).forEach(key => {
              if (sections[key] === '_No response_' || sections[key] === '*No response*') {
                sections[key] = '';
              }
            });

            const data = {
              priority: sections['Priority'] || 'Medium',
              estimatedTime: sections['Estimated Time'] || '',
              difficulty: sections['Difficulty'] || '',
              prerequisites: sections['Prerequisites'] || '',
              description: sections['Description'] || '',
              requirements: sections['Requirements'] || '',
              acceptanceCriteria: sections['Acceptance Criteria'] || '',
              filesToCreate: sections['Files to Create'] || '',
              currentStateAnalysis: sections['Current State Analysis'] || '',
              testingChecklist: sections['Testing Checklist'] || '',
              implementationOrder: sections['Implementation Order'] || '',
              filesToModify: sections['Files to Modify'] || '',
              notes: sections['Notes'] || ''
            };

            // Format the new issue body with the standard ticket format
            const formattedBody = '# ' + title.replace('NPB-' + issue.number + ': ', '') + '\n\n' +
              '**Priority:** ' + data.priority + '  \n' +
              '**Estimated Time:** ' + data.estimatedTime + '  \n' +
              '**Difficulty:** ' + data.difficulty + '  \n' +
              '**Prerequisites:** ' + data.prerequisites + '\n\n' +
              '## Description\n' + data.description + '\n\n' +
              '## Current State Analysis\n' + (data.currentStateAnalysis || 'To be analyzed during implementation') + '\n\n' +
              '## Requirements\n\n' + data.requirements + '\n\n' +
              '## Acceptance Criteria\n' + data.acceptanceCriteria + '\n\n' +
              '## Testing Checklist\n' + (data.testingChecklist || 'To be defined during implementation') + '\n\n' +
              '## Implementation Order\n' + (data.implementationOrder || 'To be determined during planning') + '\n\n' +
              '## Files to Modify\n' + (data.filesToModify || 'To be determined during implementation') + '\n\n' +
              '## Files to Create\n' + (data.filesToCreate || 'None') + '\n\n' +
              '## Notes\n' + (data.notes || 'Additional implementation notes will be added as needed');

            // Update the issue with the formatted body
            try {
              await github.rest.issues.update({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue.number,
                body: formattedBody
              });
              console.log('Body updated successfully');
            } catch (error) {
              console.error('Failed to update body:', error);
            }
